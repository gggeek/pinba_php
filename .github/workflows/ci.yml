name: CI

on: [push, pull_request]

jobs:
    test:
        runs-on: ${{ matrix.operating-system }}
        env:
            PINBA_SERVER: localhost
            PINBA_PORT: 30002
            PINBA_DB_SERVER: 127.0.0.1
            PINBA_DB_PORT: 3306
            PINBA_DB_USER: pinba
            PINBA_DB_PASSWORD: pinba
            PINBA_DB_DATABASE: pinba
        strategy:
            fail-fast: false
            matrix:
                include:
                    # @see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
                    # @todo run some tests on 'windows-latest' (needs test env setup scripts for windows to be developed)
                    -   php: '8.1'
                        pinba-container: anchorfree/pinba2
                        operating-system: ubuntu-22.04
                    -   php: '8.0'
                        pinba-container: tony2001/pinba
                        operating-system: ubuntu-22.04
                    -   php: '7.4'
                        pinba-container: anchorfree/pinba2
                        operating-system: ubuntu-22.04
                        # nb: the version of phpunit we use does not support code coverage generation on php 8
                        code-coverage: true
                    -   php: '7.3'
                        pinba-container: tony2001/pinba
                        operating-system: ubuntu-22.04
                    -   php: '7.2'
                        pinba-container: anchorfree/pinba2
                        operating-system: ubuntu-20.04
                    -   php: '7.1'
                        pinba-container: tony2001/pinba
                        operating-system: ubuntu-20.04
                    -   php: '7.0'
                        pinba-container: anchorfree/pinba2
                        operating-system: ubuntu-20.04
                    -   php: '5.6'
                        pinba-container: tony2001/pinba
                        operating-system: ubuntu-20.04
                    -   php: '5.5'
                        pinba-container: anchorfree/pinba2
                        operating-system: ubuntu-22.04
                    -   php: '5.4'
                        pinba-container: tony2001/pinba
                        operating-system: ubuntu-20.04
        steps:
            -    name: checkout code
                 uses: actions/checkout@v3

            # Although this action is quite nice, we prefer to use the same script to set up php that we use for the
            # docker image used for local testing. This allows us to make sure that script is always in good shape
            #-   name: set up php
            #    uses: shivammathur/setup-php@v2
            #    with:
            #        php-version: ${{ matrix.php }}
            #        extensions: curl, dom, mbstring, xsl
            #        ini-values: 'cgi.fix_pathinfo=1, always_populate_raw_post_data=-1'
            #        #tools: ${{ matrix.phpunit-version }}
            #        coverage: ${{ matrix.code-coverage}}

            -   name: set up env
                # @todo add env setup scripts for windows
                run: |
                    chmod 755 ./tests/ci/images/php/setup/*.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/images/php/setup/setup_apache.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/images/php/setup/setup_php.sh ${{ matrix.php }}
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/images/php/setup/setup_composer.sh
                    # no need for pinboard (yet)
                    #sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/images/php/setup/setup_pinboard.sh
                    # fix fs perms for recent Apache versions configuration (ie. starting from Jammy)
                    f="$(pwd)"; while [[ $f != / ]]; do sudo chmod +rx "$f"; f=$(dirname "$f"); done;
                    find . -type d -exec chmod +rx {} \;
                    find . -type f -exec chmod +r {} \;

            -   name: start pinba as container
                # @todo could we use the `services` config key? to assign a container name, we could use `options: --name mycontainer`
                run: |
                    # in case mysql is running on port 3306
                    sudo /etc/init.d/mysql stop || true
                    if [ "${{ matrix.pinba-container }}" = anchorfree/pinba2 ]; then
                        docker run -d -p 127.0.0.1:30002:3002/udp -p 127.0.0.1:3306:3306/tcp "${{ matrix.pinba-container }}"
                        # @todo instead of waiting, ping the server in a loop for a few seconds
                        sleep 5
                        echo "So far so good..."
                        docker exec "$container" mysql -h 127.0.0.1 -u root < ./tests/ci/images/pinba2/setup/mysql_init.sql
                    else
                        container=$(docker run -d -p 127.0.0.1:30002:30002/udp -p 127.0.0.1:3306:3306/tcp "${{ matrix.pinba-container }}")
                        docker exec "$container" apt-get update
                        docker exec "$container" apt-get -y install mysql-client
                        # @todo instead of waiting, ping the server in a loop for a few seconds
                        sleep 5
                        echo "So far so good..."
                        docker exec "$container" mysql -h 127.0.0.1 -u root < ./tests/ci/images/pinba/setup/mysql_init.sql
                    fi


            # Avoid downloading composer deps on every workflow run. Is this useful for us? Caching the installation of
            # php/apache/privoxy/perl would be more useful...
            #-
            #    uses: actions/cache@v2
            #    with:
            #        path: /tmp/composer-cache
            #        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

            -   name: install dependencies
                run: 'composer install'

            -   name: run tests and upload coverage info if needed
                run: |
                    if [ -z "${{ matrix.code-coverage }}" ]; then
                        ./vendor/bin/phpunit -v tests
                    else
                        ./tests/ci/images/php/setup/setup_code_coverage.sh enable
                        ./vendor/bin/phpunit -v --coverage-clover=coverage.clover tests
                        if [ -f coverage.clover ]; then
                            wget https://uploader.codecov.io/latest/linux/codecov && \
                            chmod +x codecov && \
                            ./codecov -f coverage.clover
                        else
                            echo "WARNING: code coverage not generated. Is xdebug disabled?"
                        fi
                    fi

            # @todo would it be useful to run a 2nd test with composer --prefer-lowest? After all the only dependencies we have are testing tools

            -   name: failure troubleshooting
                if: ${{ failure() }}
                run: |
                    #env
                    #php -i
                    #ps auxwww
                    docker ps
                    #dpkg --list | grep php
                    #ps auxwww | grep fpm
                    #pwd
                    #sudo env
                    #systemctl status apache2.service
                    #ls -la /etc/apache2/mods-enabled
                    #ls -la /etc/apache2/conf-enabled
                    #ls -la /etc/apache2/mods-available
                    #ls -la /etc/apache2/conf-available
                    #ls -la /etc/apache2/sites-available/
                    #sudo cat /etc/apache2/envvars
                    #sudo cat /etc/apache2/sites-available/000-default.conf
                    #ls -ltr /var/log
                    #ls -ltr /var/log/apache2
                    sudo cat /var/log/apache2/error.log
                    sudo cat /var/log/apache2/other_vhosts_access.log
                    sudo cat /var/log/php*.log
